# coding=utf-8
r"""
This code was generated by
\ / _    _  _|   _  _
 | (_)\/(_)(_|\/| |(/_  v1.0.0
      /       /
"""

from tests import IntegrationTestCase
from tests.holodeck import Request
from twilio.base import serialize
from twilio.base.exceptions import TwilioException
from twilio.http.response import Response


class CampaignTestCase(IntegrationTestCase):

    def test_fetch_request(self):
        self.holodeck.mock(Response(500, ''))

        with self.assertRaises(TwilioException):
            self.client.messaging.v1.campaigns("CMXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX").fetch()

        self.holodeck.assert_has_request(Request(
            'get',
            'https://messaging.twilio.com/v1/a2p/Campaigns/CMXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX',
        ))

    def test_fetch_response(self):
        self.holodeck.mock(Response(
            200,
            '''
            {
                "sid": "CMdeadbeef66043a43b62be6d67c635c85",
                "account_sid": "ACaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
                "messaging_service_sid": "MGaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
                "date_created": "2021-01-27T14:47:52Z",
                "date_updated": "2021-01-27T14:47:52Z",
                "description": "Test description for test campaing",
                "message_samples": [
                    "Test_Sample_1",
                    "Another_test_sample_2"
                ],
                "status": "pending",
                "failure_reason": null,
                "use_case": "PUBLIC_SERVICE_ANNOUNCEMENT",
                "has_embedded_links": true,
                "has_embedded_phone": false,
                "brand_registration_sid": "BN0044409f7e067e279523808d267e2d85",
                "url": "https://messaging.twilio.com/v1/a2p/Campaigns/CMdeadbeef66043a43b62be6d67c635c85"
            }
            '''
        ))

        actual = self.client.messaging.v1.campaigns("CMXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX").fetch()

        self.assertIsNotNone(actual)

    def test_list_request(self):
        self.holodeck.mock(Response(500, ''))

        with self.assertRaises(TwilioException):
            self.client.messaging.v1.campaigns.list()

        self.holodeck.assert_has_request(Request(
            'get',
            'https://messaging.twilio.com/v1/a2p/Campaigns',
        ))

    def test_read_full_response(self):
        self.holodeck.mock(Response(
            200,
            '''
            {
                "meta": {
                    "page": 0,
                    "page_size": 50,
                    "first_page_url": "https://messaging.twilio.com/v1/a2p/Campaigns?PageSize=50&Page=0",
                    "previous_page_url": null,
                    "next_page_url": null,
                    "key": "data",
                    "url": "https://messaging.twilio.com/v1/a2p/Campaigns?PageSize=50&Page=0"
                },
                "data": [
                    {
                        "sid": "CMdeadbeef66043a43b62be6d67c635c85",
                        "account_sid": "ACaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
                        "messaging_service_sid": "MGaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
                        "date_created": "2021-01-27T14:47:52Z",
                        "date_updated": "2021-01-27T14:47:53Z",
                        "description": "Test description for test campaing",
                        "message_samples": [
                            "Test_Sample_1",
                            "Another_test_sample_2"
                        ],
                        "status": "pending",
                        "failure_reason": null,
                        "use_case": "GAMBLING_SWEEPSTAKE",
                        "has_embedded_links": true,
                        "has_embedded_phone": false,
                        "brand_registration_sid": "BN0044409f7e067e279523808d267e2d85",
                        "url": "https://messaging.twilio.com/v1/a2p/Campaigns/CMdeadbeef66043a43b62be6d67c635c85"
                    }
                ]
            }
            '''
        ))

        actual = self.client.messaging.v1.campaigns.list()

        self.assertIsNotNone(actual)

    def test_create_request(self):
        self.holodeck.mock(Response(500, ''))

        with self.assertRaises(TwilioException):
            self.client.messaging.v1.campaigns.create(brand_registration_sid="BNXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", use_case="use_case", description="description", message_samples=['message_samples'], has_embedded_links=True, has_embedded_phone=True, messaging_service_sid="MGXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX")

        values = {
            'BrandRegistrationSid': "BNXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX",
            'UseCase': "use_case",
            'Description': "description",
            'MessageSamples': serialize.map(['message_samples'], lambda e: e),
            'HasEmbeddedLinks': True,
            'HasEmbeddedPhone': True,
            'MessagingServiceSid': "MGXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX",
        }

        self.holodeck.assert_has_request(Request(
            'post',
            'https://messaging.twilio.com/v1/a2p/Campaigns',
            data=values,
        ))

    def test_create_response(self):
        self.holodeck.mock(Response(
            201,
            '''
            {
                "sid": "CMdeadbeef66043a43b62be6d67c635c85",
                "account_sid": "ACaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
                "messaging_service_sid": "MG3u3kcgofdljponkatswl3ad3ev0c123u",
                "brand_registration_sid": "BN0044409f7e067e279523808d267e2d85",
                "date_created": "2021-01-27T14:47:52Z",
                "date_updated": "2021-01-27T14:47:52Z",
                "description": "Send marketing messages about sales and offers to opted in customers.",
                "message_samples": [
                    "EXPRESS: Denim Days Event is ON",
                    "LAST CHANCE: Book your next flight for just 1 (ONE) EUR"
                ],
                "status": "pending",
                "failure_reason": null,
                "use_case": "2FA",
                "has_embedded_links": true,
                "has_embedded_phone": false,
                "url": "https://messaging.twilio.com/v1/a2p/Campaigns/CMdeadbeef66043a43b62be6d67c635c85"
            }
            '''
        ))

        actual = self.client.messaging.v1.campaigns.create(brand_registration_sid="BNXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", use_case="use_case", description="description", message_samples=['message_samples'], has_embedded_links=True, has_embedded_phone=True, messaging_service_sid="MGXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX")

        self.assertIsNotNone(actual)

    def test_delete_request(self):
        self.holodeck.mock(Response(500, ''))

        with self.assertRaises(TwilioException):
            self.client.messaging.v1.campaigns("CMXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX").delete()

        self.holodeck.assert_has_request(Request(
            'delete',
            'https://messaging.twilio.com/v1/a2p/Campaigns/CMXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX',
        ))

    def test_delete_response(self):
        self.holodeck.mock(Response(
            204,
            None,
        ))

        actual = self.client.messaging.v1.campaigns("CMXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX").delete()

        self.assertTrue(actual)
